import { BaseClient } from './BaseClient';
import { RESTManager } from '../rest/RESTManager';
import { UserManager, TweetManager, SpaceManager, ListManager, FilteredStreamRuleManager } from '../managers';
import { ClientCredentials, ClientUser } from '../structures';
import type { ClientCredentialsInterface, ClientOptions } from '../typings';
/**
 * The core class that exposes all the functionalities available in twitter.js
 */
export declare class Client extends BaseClient {
    #private;
    /**
     * The time at which the client became `ready`
     */
    readyAt: Date | null;
    /**
     * The bearer token that was provided to the client during login
     */
    token: string | null;
    /**
     * The credentials that were provided to the client during login
     *
     * **Note**: This will be available only if the client was logged in using {@link Client.login}
     */
    credentials: ClientCredentials | null;
    /**
     * The twitter user this client represents
     *
     * **Note**: This will be available only if the client was logged in using {@link Client.login}
     */
    me: ClientUser | null;
    /**
     * The manager for twitter API requests made by the client
     */
    rest: RESTManager;
    /**
     * The manager for {@link Tweet} objects
     */
    tweets: TweetManager;
    /**
     * The manager for {@link User} objects
     */
    users: UserManager;
    /**
     * The manager for {@link Space} objects
     */
    spaces: SpaceManager;
    /**
     * The manager for {@link List} objects
     */
    lists: ListManager;
    /**
     * The manager for {@link FilteredStreamRule} objects
     */
    filteredStreamRules: FilteredStreamRuleManager;
    /**
     * @param options The options to initialize the client with
     */
    constructor(options?: ClientOptions);
    /**
     * A getter that returns the `routeBuilder` method of {@link RESTManager}
     * for making API requests
     *
     * **Note**: This is a shortcut made available for internal use only, users of the library need not to
     * use it and should treat it as a private field
     * @private
     */
    get _api(): any;
    /**
     * Sets the client ready to make bearer token authorized API requests.
     * Emits a `ready` event on success.
     * @param token The bearer token for the client
     * @returns The provided bearer token as a `Promise`
     *
     * @throws {@link CustomTypeError} The exception is thrown if the `token` param is not a string
     */
    loginWithBearerToken(token: string): Promise<string>;
    /**
     * Sets the client ready to make both bearer token and user context authorized API requests.
     * Emits a `ready` event on success.
     * @param credentials The credentials for the client
     * @returns The provided credentials as a `Promise`
     *
     * @throws {@link CustomTypeError} The exception is thrown if the `credentials` param is not an object
     */
    login(credentials: ClientCredentialsInterface): Promise<ClientCredentials>;
}
