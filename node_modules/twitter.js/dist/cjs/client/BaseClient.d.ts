/// <reference types="node" />
import { EventEmitter } from 'events';
import type { ClientEventArgsType, ClientEventKeyType, ClientEventListenerType, ClientEventsMapping, ClientOptions } from '../typings';
/**
 * The base client class
 */
export declare class BaseClient extends EventEmitter {
    /**
     * The options passed to the client during initialization
     */
    options: ClientOptions;
    /**
     * @param options The options to initialize the client with
     */
    constructor(options?: ClientOptions);
    on<K extends keyof ClientEventsMapping | symbol>(event: ClientEventKeyType<K>, listener: (...args: ClientEventListenerType<K>) => void): this;
    once<K extends keyof ClientEventsMapping | symbol>(event: ClientEventKeyType<K>, listener: (...args: ClientEventListenerType<K>) => void): this;
    emit<K extends keyof ClientEventsMapping | symbol>(event: ClientEventKeyType<K>, ...args: ClientEventArgsType<K>): boolean;
}
