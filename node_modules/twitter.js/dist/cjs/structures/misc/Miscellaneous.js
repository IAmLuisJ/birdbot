"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ClientCredentials_instances, _ClientCredentials_validate;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchingRule = exports.TweetWithheld = exports.UserWitheld = exports.TweetCountBucket = exports.ClientCredentials = exports.RemovedRetweetResponse = exports.RetweetResponse = exports.TweetReplyHideUnhideResponse = exports.TweetUnlikeResponse = exports.TweetLikeResponse = exports.UserUnmuteResponse = exports.UserMuteResponse = exports.UserUnblockResponse = exports.UserBlockResponse = exports.UserUnfollowResponse = exports.UserFollowResponse = exports.PlaceGeo = exports.PollOption = exports.UserPublicMetrics = exports.TweetGeoCoordinates = exports.TweetGeo = exports.TweetReference = exports.TweetAttachments = exports.RequestData = void 0;
const errors_1 = require("../../errors");
/**
 * The class for storing data required for generating an API request
 */
class RequestData {
    constructor(data) {
        this.query = data.query;
        this.body = data.body;
        this.isStreaming = data.isStreaming;
        this.isUserContext = data.isUserContext;
    }
}
exports.RequestData = RequestData;
class TweetAttachments {
    constructor(data) {
        this.mediaKeys = data.media_keys ?? [];
        this.pollIds = data.poll_ids ?? [];
    }
}
exports.TweetAttachments = TweetAttachments;
class TweetReference {
    constructor(data) {
        this.type = data.type;
        this.id = data.id;
    }
}
exports.TweetReference = TweetReference;
class TweetGeo {
    constructor(data) {
        this.placeId = data.place_id;
        this.type = data.coordinates?.type ?? null;
        this.coordinates = data.coordinates ? new TweetGeoCoordinates(data.coordinates) : null;
    }
}
exports.TweetGeo = TweetGeo;
class TweetGeoCoordinates {
    constructor(data) {
        this.latitude = data.coordinates?.[0] ?? null;
        this.longitude = data.coordinates?.[1] ?? null;
    }
}
exports.TweetGeoCoordinates = TweetGeoCoordinates;
class UserPublicMetrics {
    constructor(data) {
        this.followersCount = data.followers_count;
        this.followingCount = data.following_count;
        this.tweetCount = data.tweet_count;
        this.listedCount = data.listed_count;
    }
}
exports.UserPublicMetrics = UserPublicMetrics;
class PollOption {
    constructor(data) {
        this.position = data.position;
        this.label = data.label;
        this.votes = data.votes;
    }
}
exports.PollOption = PollOption;
class PlaceGeo {
    constructor(data) {
        this.type = data.type;
        this.bbox = data.bbox;
        this.properties = data.properties;
    }
}
exports.PlaceGeo = PlaceGeo;
/**
 * A class that represents the data returned when the authorized user follows a target user
 */
class UserFollowResponse {
    constructor(data) {
        this.following = data.data.following;
        this.pendingFollow = data.data.pending_follow;
    }
}
exports.UserFollowResponse = UserFollowResponse;
/**
 * A class that represents the data returned when the authorized user unfollows a target user
 */
class UserUnfollowResponse {
    constructor(data) {
        this.following = data.data.following;
    }
}
exports.UserUnfollowResponse = UserUnfollowResponse;
/**
 * A class that represents the data returned when the authorized user blocks a target user
 */
class UserBlockResponse {
    constructor(data) {
        this.blocking = data.data.blocking;
    }
}
exports.UserBlockResponse = UserBlockResponse;
/**
 * A class that represents the data returned when the authorized user unblocks a target user
 */
class UserUnblockResponse {
    constructor(data) {
        this.blocking = data.data.blocking;
    }
}
exports.UserUnblockResponse = UserUnblockResponse;
/**
 * A class that represents the data returned when the authorized user mutes a target user
 */
class UserMuteResponse {
    constructor(data) {
        this.muting = data.data.muting;
    }
}
exports.UserMuteResponse = UserMuteResponse;
/**
 * A class that represents the data returned when the authorized user unmutes a target user
 */
class UserUnmuteResponse {
    constructor(data) {
        this.muting = data.data.muting;
    }
}
exports.UserUnmuteResponse = UserUnmuteResponse;
/**
 * A class that represents the data returned when the authorized user likes a target tweet
 */
class TweetLikeResponse {
    constructor(data) {
        this.liked = data.data.liked;
    }
}
exports.TweetLikeResponse = TweetLikeResponse;
/**
 * A class that represents the data returned when the authorized user unlikes a target tweet
 */
class TweetUnlikeResponse {
    constructor(data) {
        this.liked = data.data.liked;
    }
}
exports.TweetUnlikeResponse = TweetUnlikeResponse;
/**
 * A class that represents the data returned when the authorized user hides or unhides a target tweet reply
 */
class TweetReplyHideUnhideResponse {
    constructor(data) {
        this.hidden = data.data.hidden;
    }
}
exports.TweetReplyHideUnhideResponse = TweetReplyHideUnhideResponse;
/**
 * A class that represents the data returned when the authorized user retweets a target tweet
 */
class RetweetResponse {
    constructor(data) {
        this.retweeted = data.data.retweeted;
    }
}
exports.RetweetResponse = RetweetResponse;
/**
 * A class that represents the data returned when the authorized user removes retweet of a target tweet
 */
class RemovedRetweetResponse {
    constructor(data) {
        this.retweeted = data.data.retweeted;
    }
}
exports.RemovedRetweetResponse = RemovedRetweetResponse;
class ClientCredentials {
    constructor(data) {
        _ClientCredentials_instances.add(this);
        __classPrivateFieldGet(this, _ClientCredentials_instances, "m", _ClientCredentials_validate).call(this, data);
        this.consumerKey = data.consumerKey;
        this.consumerSecret = data.consumerSecret;
        this.accessToken = data.accessToken;
        this.accessTokenSecret = data.accessTokenSecret;
        this.username = data.username;
        this.bearerToken = data.bearerToken;
    }
}
exports.ClientCredentials = ClientCredentials;
_ClientCredentials_instances = new WeakSet(), _ClientCredentials_validate = function _ClientCredentials_validate({ consumerKey, consumerSecret, accessToken, accessTokenSecret, username, bearerToken, }) {
    if (typeof consumerKey !== 'string' ||
        typeof consumerSecret !== 'string' ||
        typeof accessToken !== 'string' ||
        typeof accessTokenSecret !== 'string' ||
        typeof username !== 'string' ||
        typeof bearerToken !== 'string') {
        throw new errors_1.CustomError('CREDENTIALS_NOT_STRING');
    }
};
class TweetCountBucket {
    constructor(data, granularity) {
        this.start = new Date(data.start);
        this.end = new Date(data.end);
        this.count = data.tweet_count;
        this.granularity = granularity ?? 'hour';
    }
}
exports.TweetCountBucket = TweetCountBucket;
/**
 * Represents withholding details about a user
 */
class UserWitheld {
    constructor(data) {
        this.countryCodes = data.country_codes;
        this.scope = data.scope ?? null;
    }
}
exports.UserWitheld = UserWitheld;
/**
 * Represents withholding details about a tweet
 */
class TweetWithheld extends UserWitheld {
    constructor(data) {
        super(data);
        this.copyright = data.copyright;
    }
}
exports.TweetWithheld = TweetWithheld;
/**
 * The rule that matched against the filtered tweet
 */
class MatchingRule {
    constructor(data) {
        this.id = data.id;
        this.tag = typeof data.tag === 'string' ? (data.tag.length > 0 ? data.tag : null) : null;
    }
}
exports.MatchingRule = MatchingRule;
