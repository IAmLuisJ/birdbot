"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimplifiedUser = void 0;
const BaseStructure_1 = require("./BaseStructure");
const misc_1 = require("./misc");
/**
 * A simplified version of {@link User} class
 */
class SimplifiedUser extends BaseStructure_1.BaseStructure {
    constructor(client, data) {
        super(client, data);
        this.name = data.name;
        this.username = data.username;
        this.createdAt = data.created_at ? new Date(data.created_at) : null;
        this.description =
            typeof data.description === 'string' ? (data.description.length > 0 ? data.description : null) : null;
        this.entities = data.entities ? new misc_1.UserEntities(data.entities) : null;
        this.location = data.location ?? null;
        this.pinnedTweetId = data.pinned_tweet_id ?? null;
        this.profileImageURL = data.profile_image_url ?? null;
        this.protected = data.protected ?? null;
        this.publicMetrics = data.public_metrics ? new misc_1.UserPublicMetrics(data.public_metrics) : null;
        this.url = data.url ?? null;
        this.verified = data.verified ?? null;
        this.withheld = data.withheld ? new misc_1.UserWitheld(data.withheld) : null;
    }
    /**
     * Follows this user on twitter.
     * @returns A {@link UserFollowResponse} object
     */
    async follow() {
        return this.client.users.follow(this.id);
    }
    /**
     * Unfollows this user on twitter.
     * @returns A {@link UserUnfollowResponse} object
     */
    async unfollow() {
        return this.client.users.unfollow(this.id);
    }
    /**
     * Blocks this user on twitter.
     * @returns A {@link UserBlockResponse} object
     */
    async block() {
        return this.client.users.block(this.id);
    }
    /**
     * Unblocks this user on twitter.
     * @returns A {@link UserUnblockResponse} object
     */
    async unblock() {
        return this.client.users.unblock(this.id);
    }
    /**
     * Mutes this user on twitter.
     * @returns A {@link UserMuteResponse} object
     */
    async mute() {
        return this.client.users.mute(this.id);
    }
    /**
     * Unmutes this user on twitter.
     * @returns A {@link UserUnmuteResponse} object
     */
    async unmute() {
        return this.client.users.unmute(this.id);
    }
    /**
     * Fetches followers of this user.
     * @param maxResultsPerPage The maximum amount of users to fetch per page of the book. The API will default this to `100` if not provided
     * @returns A tuple containing {@link FollowersBook} object and a {@link Collection} of {@link User} objects representing the first page
     */
    async fetchFollowers(maxResultsPerPage) {
        return this.client.users.fetchFollowers(this.id, maxResultsPerPage);
    }
    /**
     * Fetches users followed by this user.
     * @param maxResultsPerPage The maximum amount of users to fetch per page of the book. The API will default this to `100` if not provided
     * @returns A tuple containing {@link FollowingsBook} object and a {@link Collection} of {@link User} objects representing the first page
     */
    async fetchFollowings(maxResultsPerPage) {
        return this.client.users.fetchFollowings(this.id, maxResultsPerPage);
    }
}
exports.SimplifiedUser = SimplifiedUser;
