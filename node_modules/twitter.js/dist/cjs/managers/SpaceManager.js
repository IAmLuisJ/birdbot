"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpaceManager_instances, _SpaceManager_fetchSingleSpace, _SpaceManager_fetchMultipleSpaces;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceManager = void 0;
const util_1 = require("../util");
const BaseManager_1 = require("./BaseManager");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
class SpaceManager extends BaseManager_1.BaseManager {
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client) {
        super(client, structures_1.Space);
        _SpaceManager_instances.add(this);
    }
    /**
     * Fetches spaces from twitter.
     * @param options The options for fetching spaces
     * @returns A {@link Space} or a {@link Collection} of them as a `Promise`
     */
    async fetch(options) {
        if (typeof options !== 'object')
            throw new errors_1.CustomTypeError('INVALID_TYPE', 'options', 'object', true);
        if ('space' in options) {
            const spaceId = this.resolveId(options.space);
            if (!spaceId)
                throw new errors_1.CustomTypeError('SPACE_RESOLVE_ID');
            return __classPrivateFieldGet(this, _SpaceManager_instances, "m", _SpaceManager_fetchSingleSpace).call(this, spaceId, options);
        }
        if ('spaces' in options) {
            if (!Array.isArray(options.spaces))
                throw new errors_1.CustomTypeError('INVALID_TYPE', 'spaces', 'array', true);
            const spaceIds = options.spaces.map(space => {
                const spaceId = this.resolveId(space);
                if (!spaceId)
                    throw new errors_1.CustomTypeError('SPACE_RESOLVE_ID');
                return spaceId;
            });
            return __classPrivateFieldGet(this, _SpaceManager_instances, "m", _SpaceManager_fetchMultipleSpaces).call(this, spaceIds, options);
        }
        throw new errors_1.CustomTypeError('INVALID_FETCH_OPTIONS');
    }
    /**
     * Fetches spaces of creators using their user ids.
     * @param options The options for fetching spaces
     * @returns A {@link Collection} of {@link Space} as a `Promise`
     */
    async fetchByCreatorIds(options) {
        if (typeof options !== 'object')
            throw new errors_1.CustomTypeError('INVALID_TYPE', 'options', 'object', true);
        if (!Array.isArray(options.users))
            throw new errors_1.CustomTypeError('INVALID_TYPE', 'users', 'array', true);
        const fetchedSpaceCollection = new util_1.Collection();
        const userIds = options.users.map(user => {
            const userId = this.client.users.resolveId(user);
            if (!userId)
                throw new errors_1.CustomTypeError('USER_RESOLVE_ID', 'fetch spaces of');
            return userId;
        });
        const queryParameters = this.client.options.queryParameters;
        const query = {
            user_ids: userIds,
            expansions: queryParameters?.spaceExpansions,
            'user.fields': queryParameters?.userFields,
            'space.fields': queryParameters?.spaceFields,
        };
        const requestData = new structures_1.RequestData({ query });
        const data = await this.client._api.spaces.by.creator_ids.get(requestData);
        if (data.meta.result_count === 0)
            return fetchedSpaceCollection;
        const rawSpaces = data.data;
        const rawSpacesIncludes = data.includes;
        for (const rawSpace of rawSpaces) {
            const space = this._add(rawSpace.id, { data: rawSpace, includes: rawSpacesIncludes }, options.cacheAfterFetching);
            fetchedSpaceCollection.set(space.id, space);
        }
        return fetchedSpaceCollection;
    }
    /**
     * Fetches spaces using search query.
     * @param options Option used to search spaces
     * @returns A {@link Collection} of {@link Space} as a `Promise`
     */
    async search(options) {
        const fetchedSpaceCollection = new util_1.Collection();
        const queryParameters = this.client.options.queryParameters;
        const query = {
            query: options.query,
            expansions: queryParameters?.spaceExpansions,
            max_results: options.maxResults,
            'space.fields': queryParameters?.spaceFields,
            state: options.state,
            'user.fields': queryParameters?.userFields,
        };
        const requestData = new structures_1.RequestData({ query });
        const data = await this.client._api.spaces.search.get(requestData);
        if (data.meta.result_count === 0)
            return fetchedSpaceCollection;
        const rawSpaces = data.data;
        const rawSpacesIncludes = data.includes;
        for (const rawSpace of rawSpaces) {
            const space = this._add(rawSpace.id, { data: rawSpace, includes: rawSpacesIncludes }, options.cacheAfterFetching);
            fetchedSpaceCollection.set(space.id, space);
        }
        return fetchedSpaceCollection;
    }
}
exports.SpaceManager = SpaceManager;
_SpaceManager_instances = new WeakSet(), _SpaceManager_fetchSingleSpace = 
// #### ðŸš§ PRIVATE METHODS ðŸš§ ####
async function _SpaceManager_fetchSingleSpace(spaceId, options) {
    if (!options.skipCacheCheck) {
        const cachedSpace = this.cache.get(spaceId);
        if (cachedSpace)
            return cachedSpace;
    }
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.spaceExpansions,
        'space.fields': queryParameters?.spaceFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api.spaces(spaceId).get(requestData);
    return this._add(data.data.id, data, options.cacheAfterFetching);
}, _SpaceManager_fetchMultipleSpaces = async function _SpaceManager_fetchMultipleSpaces(spaceIds, options) {
    const fetchedSpaceCollection = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        ids: spaceIds,
        expansions: queryParameters?.spaceExpansions,
        'space.fields': queryParameters?.spaceFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api.spaces.get(requestData);
    const rawSpaces = data.data;
    const rawSpacesIncludes = data.includes;
    for (const rawSpace of rawSpaces) {
        const space = this._add(rawSpace.id, { data: rawSpace, includes: rawSpacesIncludes }, options.cacheAfterFetching);
        fetchedSpaceCollection.set(space.id, space);
    }
    return fetchedSpaceCollection;
};
