import { Collection } from '../util';
import { BaseManager } from './BaseManager';
import { SearchTweetsBook, TweetsCountBook } from '../books';
import { RemovedRetweetResponse, RetweetResponse, TweetLikeResponse, TweetReplyHideUnhideResponse, TweetUnlikeResponse, User, Tweet, TweetCountBucket } from '../structures';
import type { Client } from '../client';
import type { TweetManagerFetchResult, TweetResolvable, FetchTweetOptions, FetchTweetsOptions, SearchTweetsOptions, CountTweetsOptions, TweetCreateOptions } from '../typings';
import type { Snowflake } from 'twitter-types';
/**
 * The manager class that holds API methods for {@link Tweet} objects and stores their cache
 */
export declare class TweetManager extends BaseManager<Snowflake, TweetResolvable, Tweet> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Resolves a tweet resolvable to its respective {@link Tweet} object.
     * @param tweetResolvable An ID or instance that can be resolved to a tweet object
     * @returns The resolved tweet object
     */
    resolve(tweetResolvable: TweetResolvable): Tweet | null;
    /**
     * Resolves a tweet resolvable to its respective id.
     * @param tweetResolvable An ID or instance that can be resolved to a tweet object
     * @returns The id of the resolved tweet object
     */
    resolveId(tweetResolvable: TweetResolvable): Snowflake | null;
    /**
     * Fetches tweets from twitter.
     * @param options The options for fetching tweets
     * @returns A {@link Tweet} or a {@link Collection} of them as a `Promise`
     */
    fetch<T extends FetchTweetOptions | FetchTweetsOptions>(options: T): Promise<TweetManagerFetchResult<T>>;
    /**
     * Likes a tweet.
     * @param targetTweet The tweet to like
     * @returns A {@link TweetLikeResponse} object
     */
    like(targetTweet: TweetResolvable): Promise<TweetLikeResponse>;
    /**
     * Unlikes a tweet.
     * @param targetTweet The tweet to unlike
     * @returns A {@link TweetUnlikeResponse} object
     */
    unlike(targetTweet: TweetResolvable): Promise<TweetUnlikeResponse>;
    /**
     * Hides a reply to a tweet of the authorized user.
     * @param targetTweet The reply to hide. This should be a tweet reply to a tweet of the authorized user
     * @returns A {@link TweetReplyHideUnhideResponse} object
     */
    hide(targetTweet: TweetResolvable): Promise<TweetReplyHideUnhideResponse>;
    /**
     * Unhides a reply to a tweet of the authorized user.
     * @param targetTweet The reply to unhide. This should be a tweet reply to one of the tweets of the authorized user
     * @returns A {@link TweetReplyHideUnhideResponse} object
     */
    unhide(targetTweet: TweetResolvable): Promise<TweetReplyHideUnhideResponse>;
    /**
     * Retweets a tweet.
     * @param targetTweet The tweet to retweet
     * @returns A {@link RetweetResponse} object
     */
    retweet(targetTweet: TweetResolvable): Promise<RetweetResponse>;
    /**
     * Removes the retweet of a tweet.
     * @param targetTweet The tweet whose retweet is to be removed
     * @returns A {@link RemovedRetweetResponse} object
     */
    unRetweet(targetTweet: TweetResolvable): Promise<RemovedRetweetResponse>;
    /**
     * Fetches users who have retweeted a tweet.
     * @param targetTweet The tweet whose retweeters are to be fetched
     * @returns A {@link Collection} of {@link User} objects
     */
    fetchRetweetedBy(targetTweet: TweetResolvable): Promise<Collection<Snowflake, User>>;
    /**
     * Fetches a collection of users who liked a tweet.
     * @param targetTweet The tweet whose liking users are to be fetched
     * @returns A {@link Collection} of {@link User} objects who liked the specified tweet
     */
    fetchLikedBy(targetTweet: TweetResolvable): Promise<Collection<Snowflake, User>>;
    /**
     * Fetches tweets using a search query.
     * @param query The query to match tweets with
     * @param options The options for searching tweets
     * @returns A tuple containing {@link SearchTweetsBook} object and a {@link Collection} of {@link Tweet} objects representing the first page
     */
    search(query: string, options?: SearchTweetsOptions): Promise<[SearchTweetsBook, Collection<Snowflake, Tweet>]>;
    /**
     * Fetches count of tweets matching a search query.
     * @param query The query to match the tweets with
     * @param options The options for searching tweets
     * @returns A tuple containing {@link TweetsCountBook} object and an array of {@link TweetCountBucket} objects representing the first page
     */
    count(query: string, options?: CountTweetsOptions): Promise<[TweetsCountBook, Array<TweetCountBucket>]>;
    /**
     * Creates a new tweet.
     * @param options The options for creating the tweet
     * @returns The id and text of the created tweet
     */
    create(options: TweetCreateOptions): Promise<{
        id: Snowflake;
        text: string;
    }>;
    /**
     * Deletes a tweet created by the authorized user.
     * @param tweet The tweet to delete
     * @returns A boolean representing whether the tweet got deleted
     */
    delete(tweet: TweetResolvable): Promise<boolean>;
}
