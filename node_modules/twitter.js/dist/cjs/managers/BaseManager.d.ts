import { Collection } from '../util';
import type { Client } from '../client';
import type { StructureConstructable } from '../typings';
/**
 * The base class for all managers
 */
export declare class BaseManager<K extends string, R, T extends {
    id: K;
}> {
    /**
     * The instance of {@link Client} that was used to log in
     */
    client: Client;
    /**
     * The cache of the structures held by this manager
     */
    cache: Collection<K, T>;
    /**
     * The structure that this manager stores in its cache
     */
    protected _holds: StructureConstructable<T>;
    /**
     * @param client The logged in {@link Client} instance
     * @param structureType The kind of structures this manager stores
     */
    constructor(client: Client, structureType: StructureConstructable<T>);
    /**
     * Resolves a structure resolvable to its respective structure.
     * @param idOrInstance The ID or instance of the structure held by this manager
     */
    resolve(idOrInstance: K | R): T | null;
    /**
     * Resolves a structure resolvable to its id.
     * @param idOrInstance The ID or instance of the strucutre held by this manager
     */
    resolveId(idOrInstance: K | R): K | null;
    /**
     * Converts the raw data sent by the API into a structure of type held by this manager
     * and adds it to the cache.
     * @param id The ID of the structure
     * @param data The raw data returned by the API for this structure
     * @param cacheAfterFetching Whether to store the structure in the manager's cache
     */
    _add<RawData>(id: K, data: RawData, cacheAfterFetching?: boolean): T;
}
