import { Collection } from '../util';
import { BaseManager } from './BaseManager';
import { Space } from '../structures';
import type { Client } from '../client';
import type { FetchSpaceOptions, FetchSpacesByCreatorIdsOptions, FetchSpacesOptions, SearchSpacesOptions, SpaceManagerFetchResult, SpaceResolvable } from '../typings';
import type { Snowflake } from 'twitter-types';
export declare class SpaceManager extends BaseManager<Snowflake, SpaceResolvable, Space> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Fetches spaces from twitter.
     * @param options The options for fetching spaces
     * @returns A {@link Space} or a {@link Collection} of them as a `Promise`
     */
    fetch<T extends FetchSpaceOptions | FetchSpacesOptions>(options: T): Promise<SpaceManagerFetchResult<T>>;
    /**
     * Fetches spaces of creators using their user ids.
     * @param options The options for fetching spaces
     * @returns A {@link Collection} of {@link Space} as a `Promise`
     */
    fetchByCreatorIds(options: FetchSpacesByCreatorIdsOptions): Promise<Collection<Snowflake, Space>>;
    /**
     * Fetches spaces using search query.
     * @param options Option used to search spaces
     * @returns A {@link Collection} of {@link Space} as a `Promise`
     */
    search(options: SearchSpacesOptions): Promise<Collection<Snowflake, Space>>;
}
