"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseManager = void 0;
const util_1 = require("../util");
/**
 * The base class for all managers
 */
class BaseManager {
    /**
     * @param client The logged in {@link Client} instance
     * @param structureType The kind of structures this manager stores
     */
    constructor(client, structureType) {
        Object.defineProperty(this, 'client', { writable: true, enumerable: false });
        this.client = client;
        this.cache = new util_1.Collection();
        Object.defineProperty(this, '_holds', { writable: true, enumerable: false });
        this._holds = structureType;
    }
    /**
     * Resolves a structure resolvable to its respective structure.
     * @param idOrInstance The ID or instance of the structure held by this manager
     */
    resolve(idOrInstance) {
        if (idOrInstance instanceof this._holds)
            return idOrInstance;
        if (typeof idOrInstance === 'string')
            return this.cache.get(idOrInstance) ?? null;
        return null;
    }
    /**
     * Resolves a structure resolvable to its id.
     * @param idOrInstance The ID or instance of the strucutre held by this manager
     */
    resolveId(idOrInstance) {
        if (idOrInstance instanceof this._holds)
            return idOrInstance.id;
        if (typeof idOrInstance === 'string')
            return idOrInstance;
        return null;
    }
    /**
     * Converts the raw data sent by the API into a structure of type held by this manager
     * and adds it to the cache.
     * @param id The ID of the structure
     * @param data The raw data returned by the API for this structure
     * @param cacheAfterFetching Whether to store the structure in the manager's cache
     */
    _add(id, data, cacheAfterFetching = true) {
        const entry = new this._holds(this.client, data);
        if (cacheAfterFetching)
            this.cache.set(id, entry);
        return entry;
    }
}
exports.BaseManager = BaseManager;
