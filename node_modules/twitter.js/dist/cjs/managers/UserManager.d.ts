import { Collection } from '../util';
import { BaseManager } from './BaseManager';
import { MentionsBook, FollowersBook, FollowingsBook, LikedTweetsBook, ComposedTweetsBook } from '../books';
import { UserBlockResponse, UserFollowResponse, UserMuteResponse, UserUnblockResponse, UserUnfollowResponse, UserUnmuteResponse, User } from '../structures';
import type { Client } from '../client';
import type { Tweet } from '../structures';
import type { UserManagerFetchByUsernameResult, UserManagerFetchResult, UserResolvable, FetchUserByUsernameOptions, FetchUserOptions, FetchUsersByUsernamesOptions, FetchUsersOptions, FetchComposedTweetsOptions, FetchMentionsOptions } from '../typings';
import type { Snowflake } from 'twitter-types';
/**
 * The manager class that holds API methods for {@link User} objects and stores their cache
 */
export declare class UserManager extends BaseManager<Snowflake, UserResolvable, User> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Resolves a user resolvable to its respective {@link User} object.
     * @param userResolvable An ID or instance that can be resolved to a user object
     * @returns The resolved user object
     */
    resolve(userResolvable: UserResolvable): User | null;
    /**
     * Resolves a user resolvable to its respective id.
     * @param userResolvable An ID or instance that can be resolved to a user object
     * @returns The id of the resolved user object
     */
    resolveId(userResolvable: UserResolvable): Snowflake | null;
    /**
     * Fetches users from Twitter.
     * @param options The options for fetching users
     * @returns A {@link User} or a {@link Collection} of them as a `Promise`
     */
    fetch<T extends FetchUserOptions | FetchUsersOptions>(options: T): Promise<UserManagerFetchResult<T>>;
    /**
     * Fetches users from Twitter using their usernames.
     *
     * **âš  Use {@link UserManager.fetch} if you have IDs, because usernames are subject to change**
     * @param options The options for fetching users
     * @returns A {@link User} or a {@link Collection} of them as a `Promise`
     */
    fetchByUsername<T extends FetchUserByUsernameOptions | FetchUsersByUsernamesOptions>(options: T): Promise<UserManagerFetchByUsernameResult<T>>;
    /**
     * Follows a user on twitter.
     * @param targetUser The user to follow
     * @returns A {@link UserFollowResponse} object
     */
    follow(targetUser: UserResolvable): Promise<UserFollowResponse>;
    /**
     * Unfollows a user on twitter.
     * @param targetUser The user to unfollow
     * @returns A {@link UserUnfollowResponse} object
     */
    unfollow(targetUser: UserResolvable): Promise<UserUnfollowResponse>;
    /**
     * Blocks a user on twitter.
     * @param targetUser The user to block
     * @returns A {@link UserBlockResponse} object
     */
    block(targetUser: UserResolvable): Promise<UserBlockResponse>;
    /**
     * Unblocks a user on twitter.
     * @param targetUser The user to unblock
     * @returns A {@link UserUnblockResponse} object
     */
    unblock(targetUser: UserResolvable): Promise<UserUnblockResponse>;
    /**
     * Mutes a user on twitter.
     * @param targetUser The user to mute
     * @returns A {@link UserMuteResponse} object
     */
    mute(targetUser: UserResolvable): Promise<UserMuteResponse>;
    /**
     * Unmutes a user on twitter.
     * @param targetUser The user to unmute
     * @returns A {@link UserUnmuteResponse} object
     */
    unmute(targetUser: UserResolvable): Promise<UserUnmuteResponse>;
    /**
     * Fetches followers of a given user.
     * @param targetUser The user whose followers are to be fetched
     * @param maxResultsPerPage The maximum amount of users to fetch per page. The API will default this to `100` if not provided
     * @returns A tuple containing {@link FollowersBook} object and a {@link Collection} of {@link User} objects representing the first page
     */
    fetchFollowers(targetUser: UserResolvable, maxResultsPerPage?: number): Promise<[FollowersBook, Collection<Snowflake, User>]>;
    /**
     * Fetches users followed by a given user.
     * @param targetUser The user whose followings are to be fetched
     * @param maxResultsPerPage The maximum amount of users to fetch per page. The API will default this to `100` if not provided
     * @returns A tuple containing {@link FollowingsBook} object and a {@link Collection} of {@link User} objects representing the first page
     */
    fetchFollowings(targetUser: UserResolvable, maxResultsPerPage?: number): Promise<[FollowingsBook, Collection<Snowflake, User>]>;
    /**
     * Fetches tweets liked by a given user.
     * @param targetUser The user whose liked tweet are to be fetched
     * @param maxResultsPerPage The maximum amount of tweets to fetch per page
     * @returns A tuple containing {@link LikedTweetsBook} object and a {@link Collection} of {@link Tweet} objects representing the first page
     */
    fetchLikedTweets(targetUser: UserResolvable, maxResultsPerPage?: number): Promise<[LikedTweetsBook, Collection<Snowflake, Tweet>]>;
    /**
     * Fetches tweets composed by a twitter user.
     * @param targetUser The user whose tweets are to be fetched
     * @param options The options for fetching tweets
     * @returns A tuple containing {@link ComposedTweetsBook} object and a {@link Collection} of {@link Tweet} objects representing the first page
     */
    fetchComposedTweets(targetUser: UserResolvable, options?: FetchComposedTweetsOptions): Promise<[ComposedTweetsBook, Collection<Snowflake, Tweet>]>;
    /**
     * Fetches tweets that mention a given user.
     * @param targetUser The mentioned user
     * @param options The options for fetching tweets
     * @returns A tuple containing {@link MentionsBook} object and a {@link Collection} of {@link Tweet} objects representing the first page
     */
    fetchMentions(targetUser: UserResolvable, options?: FetchMentionsOptions): Promise<[MentionsBook, Collection<Snowflake, Tweet>]>;
}
