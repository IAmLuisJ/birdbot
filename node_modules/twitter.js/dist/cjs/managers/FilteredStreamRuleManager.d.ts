import { Collection } from '../util';
import { BaseManager } from './BaseManager';
import { FilteredStreamRule } from '../structures';
import type { Client } from '../client';
import type { FetchFilteredStreamRuleOptions, FetchFilteredStreamRulesOptions, FilteredStreamRuleData, FilteredStreamRuleManagerFetchResult, FilteredStreamRuleResolvable } from '../typings';
import type { PostRemoveFilteredTweetStreamRulesResponse, Snowflake } from 'twitter-types';
export declare class FilteredStreamRuleManager extends BaseManager<Snowflake, FilteredStreamRuleResolvable, FilteredStreamRule> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Fetches one or multiple rules that are currently active.
     * @param options The options for fetching rules
     * @returns A {@link FilteredStreamRule} or a {@link Collection} of them
     */
    fetch<T extends FetchFilteredStreamRuleOptions | FetchFilteredStreamRulesOptions>(options?: T): Promise<FilteredStreamRuleManagerFetchResult<T>>;
    /**
     * Creates one or multiple rules for the filtered stream.
     * @param data The data for creating rules
     * @returns A {@link Collection} of {@link FilteredStreamRule} objects
     */
    create(data: FilteredStreamRuleData | Array<FilteredStreamRuleData>): Promise<Collection<Snowflake, FilteredStreamRule>>;
    /**
     * Deletes one or multiple rules for the filtered stream using their ids.
     * @param ruleId The id or ids of the rules to delete
     */
    deleteById(ruleId: Snowflake | Array<Snowflake>): Promise<PostRemoveFilteredTweetStreamRulesResponse>;
    /**
     * Deletes one or multiple rules for the filtered stream using their values.
     * @param ruleValue The value or values of the rules to delete
     */
    deleteByValue(ruleValue: string | Array<string>): Promise<PostRemoveFilteredTweetStreamRulesResponse>;
}
