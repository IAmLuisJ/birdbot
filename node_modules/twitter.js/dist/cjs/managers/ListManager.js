"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListManager = void 0;
const BaseManager_1 = require("./BaseManager");
const structures_1 = require("../structures");
const errors_1 = require("../errors");
/**
 * The manager class that holds API methods for {@link List} objects and stores their cache
 */
class ListManager extends BaseManager_1.BaseManager {
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client) {
        super(client, structures_1.List);
    }
    /**
     * Creates a new list.
     * @param options The options for creating a list
     * @returns The created {@link List} object
     */
    async create(options) {
        if (typeof options !== 'object')
            throw new errors_1.CustomTypeError('INVALID_TYPE', 'options', 'object', true);
        const body = {
            name: options.name,
            description: options.description,
            private: options.private,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.lists.post(requestData);
        const list = this._add(res.data.id, res.data);
        return list;
    }
    /**
     * Deletes a list.
     * @param list The list to delete
     * @returns A boolean representing whether the specified list has been deleted
     */
    async delete(list) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'delete');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api.lists(listId).delete(requestData);
        return res.data.deleted;
    }
    /**
     * Updates a lists.
     * @param list The list to update
     * @param options The options for updating the list
     * @returns A boolean representing whether the specified list has been updated
     */
    async update(list, options) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'update');
        if (typeof options !== 'object')
            throw new errors_1.CustomTypeError('INVALID_TYPE', 'options', 'object', true);
        const body = {
            name: options.name,
            description: options.description,
            private: options.private,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.lists(listId).put(requestData);
        return res.data.updated;
    }
    /**
     * Adds a member to a list
     * @param list The list to add the member to
     * @param member The user to add as a member of the list
     * @returns A boolean representing whether the specified user has been added to the List
     */
    async addMember(list, member) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'add member to');
        const userId = this.client.users.resolveId(member);
        if (!userId)
            throw new errors_1.CustomError('USER_RESOLVE_ID', 'add to the list');
        const body = {
            user_id: userId,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.lists(listId).members.post(requestData);
        return res.data.is_member;
    }
    /**
     * Removes a member from a list.
     * @param list The list to remove the member from
     * @param member The member to remove from the list
     * @returns A boolean representing whether the specified user has been removed from the list
     */
    async removeMember(list, member) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'remove the member from');
        const userId = this.client.users.resolveId(member);
        if (!userId)
            throw new errors_1.CustomError('USER_RESOLVE_ID', 'remove from the list');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api
            .lists(listId)
            .members(userId)
            .delete(requestData);
        return !res.data.is_member;
    }
    /**
     * Follows a list.
     * @param list The list to follow
     * @returns A boolean representing whether the authorized user followed the list
     */
    async follow(list) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'follow');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const body = {
            list_id: listId,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.users(loggedInUser.id).followed_lists.post(requestData);
        return res.data.following;
    }
    /**
     * Unfollows a list.
     * @param list The list to unfollow
     * @returns A boolean representing whether the authorized user unfollowed the list
     */
    async unfollow(list) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'unfollow');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api
            .users(loggedInUser.id)
            .followed_lists(listId)
            .delete(requestData);
        return !res.data.following;
    }
    /**
     * Pins a list.
     * @param list The list to pin
     * @returns A boolean representing whether the authorized user pinned the list
     */
    async pin(list) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'pin');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const body = {
            list_id: listId,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.users(loggedInUser.id).pinned_lists.post(requestData);
        return res.data.pinned;
    }
    /**
     * Unpins a list.
     * @param list The list to unpin
     * @returns A boolean representing whether the authorized user unpinned the list
     */
    async unpin(list) {
        const listId = this.resolveId(list);
        if (!listId)
            throw new errors_1.CustomError('LIST_RESOLVE_ID', 'pin');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api
            .users(loggedInUser.id)
            .pinned_lists(listId)
            .delete(requestData);
        return res.data.pinned;
    }
}
exports.ListManager = ListManager;
