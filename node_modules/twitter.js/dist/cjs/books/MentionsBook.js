"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _MentionsBook_instances, _MentionsBook_nextToken, _MentionsBook_previousToken, _MentionsBook_hasMadeInitialRequest, _MentionsBook_fetchPages;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MentionsBook = void 0;
const util_1 = require("../util");
const BaseBook_1 = require("./BaseBook");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
/**
 * A class for fetching tweets that mention a twitter user
 */
class MentionsBook extends BaseBook_1.BaseBook {
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the mentions book with
     */
    constructor(client, options) {
        super(client);
        _MentionsBook_instances.add(this);
        /**
         * The token for fetching next page
         */
        _MentionsBook_nextToken.set(this, void 0);
        /**
         * The token for fetching previous page
         */
        _MentionsBook_previousToken.set(this, void 0);
        /**
         * Whether an initial request for fetching the first page has already been made
         *
         * **Note**: Use this to not throw `PAGINATED_RESPONSE_TAIL_REACHED` error for initial page request in {@link FollowersBook.fetchNextPage}
         */
        _MentionsBook_hasMadeInitialRequest.set(this, void 0);
        this.hasMore = true;
        this.userId = options.userId;
        this.afterTweetId = options.afterTweetId ?? null;
        this.beforeTweetId = options.beforeTweetId ?? null;
        this.afterTimestamp = options.afterTimestamp ?? null;
        this.beforeTimestamp = options.beforeTimestamp ?? null;
        this.maxResultsPerPage = options.maxResultsPerPage ?? null;
    }
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweets} mentioning the owner of this book
     */
    async fetchNextPage() {
        if (!__classPrivateFieldGet(this, _MentionsBook_hasMadeInitialRequest, "f")) {
            __classPrivateFieldSet(this, _MentionsBook_hasMadeInitialRequest, true, "f");
            return __classPrivateFieldGet(this, _MentionsBook_instances, "m", _MentionsBook_fetchPages).call(this);
        }
        if (!__classPrivateFieldGet(this, _MentionsBook_nextToken, "f"))
            throw new errors_1.CustomError('PAGINATED_RESPONSE_TAIL_REACHED');
        return __classPrivateFieldGet(this, _MentionsBook_instances, "m", _MentionsBook_fetchPages).call(this, __classPrivateFieldGet(this, _MentionsBook_nextToken, "f"));
    }
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweets} mentioning the owner of this book
     */
    async fetchPreviousPage() {
        if (!__classPrivateFieldGet(this, _MentionsBook_previousToken, "f"))
            throw new errors_1.CustomError('PAGINATED_RESPONSE_HEAD_REACHED');
        return __classPrivateFieldGet(this, _MentionsBook_instances, "m", _MentionsBook_fetchPages).call(this, __classPrivateFieldGet(this, _MentionsBook_previousToken, "f"));
    }
}
exports.MentionsBook = MentionsBook;
_MentionsBook_nextToken = new WeakMap(), _MentionsBook_previousToken = new WeakMap(), _MentionsBook_hasMadeInitialRequest = new WeakMap(), _MentionsBook_instances = new WeakSet(), _MentionsBook_fetchPages = 
// #### ðŸš§ PRIVATE METHODS ðŸš§ ####
async function _MentionsBook_fetchPages(token) {
    const mentioningTweetsCollection = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.tweetExpansions,
        'media.fields': queryParameters?.mediaFields,
        'place.fields': queryParameters?.placeFields,
        'poll.fields': queryParameters?.pollFields,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
        pagination_token: token,
    };
    if (this.afterTweetId)
        query.since_id = this.afterTweetId;
    if (this.beforeTweetId)
        query.until_id = this.beforeTweetId;
    if (this.maxResultsPerPage)
        query.max_results = this.maxResultsPerPage;
    if (this.afterTimestamp)
        query.start_time = new Date(this.afterTimestamp).toISOString();
    if (this.beforeTimestamp)
        query.end_time = new Date(this.beforeTimestamp).toISOString();
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api.users(this.userId).mentions.get(requestData);
    __classPrivateFieldSet(this, _MentionsBook_nextToken, data.meta.next_token, "f");
    __classPrivateFieldSet(this, _MentionsBook_previousToken, data.meta.previous_token, "f");
    this.hasMore = data.meta.next_token ? true : false;
    if (data.meta.result_count === 0)
        return mentioningTweetsCollection;
    const rawTweets = data.data;
    const rawIncludes = data.includes;
    for (const rawTweet of rawTweets) {
        const tweet = this.client.tweets._add(rawTweet.id, { data: rawTweet, includes: rawIncludes });
        mentioningTweetsCollection.set(tweet.id, tweet);
    }
    return mentioningTweetsCollection;
};
