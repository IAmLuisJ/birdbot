import { Collection } from '../util';
import { BaseBook } from './BaseBook';
import type { Client } from '../client';
import type { Tweet } from '../structures';
import type { LikedTweetsBookOptions } from '../typings';
import type { Snowflake } from 'twitter-types';
/**
 * A class for fetching tweets liked by a twitter user
 */
export declare class LikedTweetsBook extends BaseBook {
    #private;
    /**
     * The ID of the user this book belongs to
     */
    userId: Snowflake;
    /**
     * The maximum amount of tweets that will be fetched per page.
     *
     * **Note:** This is the max count and will **not** always be equal to the number of tweets fetched in a page
     */
    maxResultsPerPage: number | null;
    /**
     * Whether there are more pages of tweets to be fetched
     *
     * **Note:** Use this as a check for deciding whether to fetch more pages
     */
    hasMore: boolean;
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the liked tweets book with
     */
    constructor(client: Client, options: LikedTweetsBookOptions);
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} objects liked by the owner of this book
     */
    fetchNextPage(): Promise<Collection<Snowflake, Tweet>>;
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} objects liked by the owner of this book
     */
    fetchPreviousPage(): Promise<Collection<Snowflake, Tweet>>;
}
