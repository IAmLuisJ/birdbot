import crypto from 'crypto';
import OAuth from 'oauth-1.0a';
import { Collection } from '../util';
import { CustomError } from '../errors';
import { buildRoute } from './APIRouter';
import { APIRequest } from './APIRequest';
import { RequestHandler } from './RequestHandler';
/**
 * Manager class for the rest API
 */
export class RESTManager {
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client) {
        Object.defineProperty(this, 'client', { writable: true, enumerable: false });
        this.client = client;
        this.requestHandlers = new Collection();
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get routeBuilder() {
        return buildRoute(this);
    }
    get baseURL() {
        return this.client.options.api?.baseURL;
    }
    getBearerAuth() {
        const client = this.client;
        if (!client.token)
            throw new CustomError('NO_BEARER_TOKEN');
        return `Bearer ${client.token}`;
    }
    getUserContextAuth(method, url) {
        const client = this.client;
        const clientCredentials = client.credentials;
        if (!clientCredentials)
            throw new CustomError('NO_CLIENT_CREDENTIALS');
        const oauth = new OAuth({
            consumer: {
                key: clientCredentials.consumerKey,
                secret: clientCredentials.consumerSecret,
            },
            signature_method: 'HMAC-SHA1',
            hash_function(base_string, key) {
                return crypto.createHmac('sha1', key).update(base_string).digest('base64');
            },
        });
        return oauth.toHeader(oauth.authorize({
            url: url.toString(),
            method: method,
        }, {
            key: clientCredentials.accessToken,
            secret: clientCredentials.accessTokenSecret,
        })).Authorization;
    }
    async request(method, path, options) {
        const apiRequest = new APIRequest(this, method, path, options);
        let handler = this.requestHandlers.get(apiRequest.route);
        if (!handler) {
            handler = new RequestHandler(this);
            this.requestHandlers.set(apiRequest.route, handler);
        }
        return handler.push(apiRequest);
    }
}
