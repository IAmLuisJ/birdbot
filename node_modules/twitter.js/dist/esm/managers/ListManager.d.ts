import { BaseManager } from './BaseManager';
import { List } from '../structures';
import type { Client } from '../client';
import type { CreateListOptions, ListResolvable, UpdateListOptions, UserResolvable } from '../typings';
import type { Snowflake } from 'twitter-types';
/**
 * The manager class that holds API methods for {@link List} objects and stores their cache
 */
export declare class ListManager extends BaseManager<Snowflake, ListResolvable, List> {
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Creates a new list.
     * @param options The options for creating a list
     * @returns The created {@link List} object
     */
    create(options: CreateListOptions): Promise<List>;
    /**
     * Deletes a list.
     * @param list The list to delete
     * @returns A boolean representing whether the specified list has been deleted
     */
    delete(list: ListResolvable): Promise<boolean>;
    /**
     * Updates a lists.
     * @param list The list to update
     * @param options The options for updating the list
     * @returns A boolean representing whether the specified list has been updated
     */
    update(list: ListResolvable, options: UpdateListOptions): Promise<boolean>;
    /**
     * Adds a member to a list
     * @param list The list to add the member to
     * @param member The user to add as a member of the list
     * @returns A boolean representing whether the specified user has been added to the List
     */
    addMember(list: ListResolvable, member: UserResolvable): Promise<boolean>;
    /**
     * Removes a member from a list.
     * @param list The list to remove the member from
     * @param member The member to remove from the list
     * @returns A boolean representing whether the specified user has been removed from the list
     */
    removeMember(list: ListResolvable, member: UserResolvable): Promise<boolean>;
    /**
     * Follows a list.
     * @param list The list to follow
     * @returns A boolean representing whether the authorized user followed the list
     */
    follow(list: ListResolvable): Promise<boolean>;
    /**
     * Unfollows a list.
     * @param list The list to unfollow
     * @returns A boolean representing whether the authorized user unfollowed the list
     */
    unfollow(list: ListResolvable): Promise<boolean>;
    /**
     * Pins a list.
     * @param list The list to pin
     * @returns A boolean representing whether the authorized user pinned the list
     */
    pin(list: ListResolvable): Promise<boolean>;
    /**
     * Unpins a list.
     * @param list The list to unpin
     * @returns A boolean representing whether the authorized user unpinned the list
     */
    unpin(list: ListResolvable): Promise<boolean>;
}
