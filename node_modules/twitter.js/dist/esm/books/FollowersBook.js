var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _FollowersBook_instances, _FollowersBook_nextToken, _FollowersBook_previousToken, _FollowersBook_hasMadeInitialRequest, _FollowersBook_fetchPages;
import { Collection } from '../util';
import { BaseBook } from './BaseBook';
import { CustomError } from '../errors';
import { RequestData } from '../structures';
/**
 * A class for fetching followers of a twitter user
 */
export class FollowersBook extends BaseBook {
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the followers book with
     */
    constructor(client, options) {
        super(client);
        _FollowersBook_instances.add(this);
        /**
         * The token for fetching next page
         */
        _FollowersBook_nextToken.set(this, void 0);
        /**
         * The token for fetching previous page
         */
        _FollowersBook_previousToken.set(this, void 0);
        /**
         * Whether an initial request for fetching the first page has already been made
         *
         * **Note**: Use this to not throw `PAGINATED_RESPONSE_TAIL_REACHED` error for initial page request in {@link FollowersBook.fetchNextPage}
         */
        _FollowersBook_hasMadeInitialRequest.set(this, void 0);
        this.hasMore = true;
        this.userId = options.userId;
        this.maxResultsPerPage = options.maxResultsPerPage ?? null;
    }
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link User} objects who have been following the owner of this book
     */
    async fetchNextPage() {
        if (!__classPrivateFieldGet(this, _FollowersBook_hasMadeInitialRequest, "f")) {
            __classPrivateFieldSet(this, _FollowersBook_hasMadeInitialRequest, true, "f");
            return __classPrivateFieldGet(this, _FollowersBook_instances, "m", _FollowersBook_fetchPages).call(this);
        }
        if (!__classPrivateFieldGet(this, _FollowersBook_nextToken, "f"))
            throw new CustomError('PAGINATED_RESPONSE_TAIL_REACHED');
        return __classPrivateFieldGet(this, _FollowersBook_instances, "m", _FollowersBook_fetchPages).call(this, __classPrivateFieldGet(this, _FollowersBook_nextToken, "f"));
    }
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link User} objects who have been following the owner of this book
     */
    async fetchPreviousPage() {
        if (!__classPrivateFieldGet(this, _FollowersBook_previousToken, "f"))
            throw new CustomError('PAGINATED_RESPONSE_HEAD_REACHED');
        return __classPrivateFieldGet(this, _FollowersBook_instances, "m", _FollowersBook_fetchPages).call(this, __classPrivateFieldGet(this, _FollowersBook_previousToken, "f"));
    }
}
_FollowersBook_nextToken = new WeakMap(), _FollowersBook_previousToken = new WeakMap(), _FollowersBook_hasMadeInitialRequest = new WeakMap(), _FollowersBook_instances = new WeakSet(), _FollowersBook_fetchPages = 
// #### ðŸš§ PRIVATE METHODS ðŸš§ ####
async function _FollowersBook_fetchPages(token) {
    const followersCollection = new Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.userExpansions,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
        pagination_token: token,
    };
    if (this.maxResultsPerPage)
        query.max_results = this.maxResultsPerPage;
    const requestData = new RequestData({ query });
    const data = await this.client._api.users(this.userId).followers.get(requestData);
    __classPrivateFieldSet(this, _FollowersBook_nextToken, data.meta.next_token, "f");
    __classPrivateFieldSet(this, _FollowersBook_previousToken, data.meta.previous_token, "f");
    this.hasMore = data.meta.next_token ? true : false;
    if (data.meta.result_count === 0)
        return followersCollection;
    const rawUsers = data.data;
    const rawIncludes = data.includes;
    for (const rawUser of rawUsers) {
        const user = this.client.users._add(rawUser.id, { data: rawUser, includes: rawIncludes });
        followersCollection.set(user.id, user);
    }
    return followersCollection;
};
