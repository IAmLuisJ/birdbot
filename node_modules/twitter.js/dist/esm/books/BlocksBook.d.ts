import { Collection } from '../util';
import { BaseBook } from './BaseBook';
import type { Client } from '../client';
import type { User } from '../structures';
import type { BlocksBookOptions } from '../typings';
import type { Snowflake } from 'twitter-types';
/**
 * A class for fetching users blocked by the authorized user
 */
export declare class BlocksBook extends BaseBook {
    #private;
    /**
     * The ID of the user this book belongs to
     */
    userId: Snowflake;
    /**
     * The maximum amount of users that will be fetched per page
     *
     * **Note:** This is the max count and will **not** always be equal to the number of users fetched in a page
     */
    maxResultsPerPage: number | null;
    /**
     * Whether there are more pages of users to be fetched
     *
     * **Note:** Use this as a check for deciding whether to fetch more pages
     */
    hasMore: boolean;
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the blocks book with
     */
    constructor(client: Client, options: BlocksBookOptions);
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link User} objects that have been blocked by the authorized user
     */
    fetchNextPage(): Promise<Collection<Snowflake, User>>;
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link User} objects that have been blocked by the authorized user
     */
    fetchPreviousPage(): Promise<Collection<Snowflake, User>>;
}
