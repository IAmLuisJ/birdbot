import type { Collection } from '../util';
import type { Snowflake } from 'twitter-types';
import type { FetchFilteredStreamRuleOptions, FetchFilteredStreamRulesOptions, TweetCreateOptions } from './Interfaces';
import type { User, Tweet, Space, SimplifiedSpace, SimplifiedUser, SimplifiedTweet, FilteredStreamRule, List } from '../structures';
import type { ClientEventsMapping, FetchTweetOptions, FetchTweetsOptions, FetchUserByUsernameOptions, FetchUserOptions, FetchUsersByUsernamesOptions, FetchUsersOptions, FetchSpaceOptions, FetchSpacesOptions, BookOptions } from './Interfaces';
export declare type ClientEventArgsType<K> = K extends keyof ClientEventsMapping ? ClientEventsMapping[K] : any[];
export declare type ClientEventKeyType<K> = K extends keyof ClientEventsMapping ? LiteralUnion<K> : Exclude<K, keyof ClientEventsMapping>;
export declare type ClientEventListenerType<K> = K extends keyof ClientEventsMapping ? ClientEventsMapping[K] : any[];
export declare type LiteralUnion<K extends T, T = string> = K | (T & {
    zz_ignore_me?: never;
});
export declare type UserManagerFetchResult<T extends FetchUserOptions | FetchUsersOptions> = T extends FetchUserOptions ? User : Collection<Snowflake, User>;
export declare type UserManagerFetchByUsernameResult<T extends FetchUserByUsernameOptions | FetchUsersByUsernamesOptions> = T extends FetchUserByUsernameOptions ? User : Collection<Snowflake, User>;
export declare type UserResolvable = User | SimplifiedUser | Snowflake;
export declare type TweetManagerFetchResult<T extends FetchTweetOptions | FetchTweetsOptions> = T extends FetchTweetOptions ? Tweet : Collection<Snowflake, Tweet>;
export declare type TweetResolvable = Tweet | SimplifiedTweet | Snowflake;
export declare type SpaceResolvable = Space | SimplifiedSpace | Snowflake;
export declare type ListResolvable = List | Snowflake;
export declare type SpaceManagerFetchResult<T extends FetchSpaceOptions | FetchSpacesOptions> = T extends FetchSpaceOptions ? Space : Collection<Snowflake, Space>;
export declare type FilteredStreamRuleResolvable = FilteredStreamRule | Snowflake;
/**
 * The options used to create a {@link BlocksBook} object
 */
export declare type BlocksBookOptions = BookOptions;
/**
 * The options used to create a {@link FollowersBook} object
 */
export declare type FollowersBookOptions = BookOptions;
/**
 * The options used to create a {@link FollowingsBook} object
 */
export declare type FollowingsBookOptions = BookOptions;
/**
 * The options used to create a {@link LikedTweetsBook} object
 */
export declare type LikedTweetsBookOptions = BookOptions;
/**
 * The options used to create a {@link MutesBook} object
 */
export declare type MutesBookOptions = BookOptions;
export declare type FilteredStreamRuleManagerFetchResult<T extends FetchFilteredStreamRuleOptions | FetchFilteredStreamRulesOptions> = T extends undefined | FetchFilteredStreamRulesOptions ? Collection<Snowflake, FilteredStreamRule> : FilteredStreamRule;
/**
 * Options used to reply to a tweet
 */
export declare type TweetReplyOptions = Omit<TweetCreateOptions, 'inReplyToTweet'>;
/**
 * Options used to quote a tweet
 */
export declare type TweetQuoteOptions = Omit<TweetCreateOptions, 'quoteTweet'>;
