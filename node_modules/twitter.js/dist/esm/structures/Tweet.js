var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Tweet_instances, _Tweet_patchAuthor, _Tweet_patchMentions, _Tweet_patchTweetReferences, _Tweet_patchPolls, _Tweet_patchPlaces, _Tweet_patchMedia;
import { Poll } from './Poll';
import { Place } from './Place';
import { Media } from './Media';
import { Collection } from '../util';
import { SimplifiedUser } from './SimplifiedUser';
import { SimplifiedTweet } from './SimplifiedTweet';
/**
 * The class that represents a tweet on Twitter
 */
export class Tweet extends SimplifiedTweet {
    constructor(client, data) {
        super(client, data.data);
        _Tweet_instances.add(this);
        this.author = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchAuthor).call(this, data.includes?.users) ?? null;
        this.mentions = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchMentions).call(this, data.includes?.users);
        this.repliedTo = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchTweetReferences).call(this, 'replied_to', data.includes?.tweets) ?? null;
        this.quoted = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchTweetReferences).call(this, 'quoted', data.includes?.tweets) ?? null;
        this.polls = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchPolls).call(this, data.includes?.polls);
        this.places = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchPlaces).call(this, data.includes?.places);
        this.media = __classPrivateFieldGet(this, _Tweet_instances, "m", _Tweet_patchMedia).call(this, data.includes?.media);
    }
    /**
     * Sends a reply to this tweet
     * @param options The options for the reply
     * @returns The created reply
     */
    async reply(options) {
        return this.client.tweets.create({ ...options, inReplyToTweet: this.id });
    }
    /**
     * Quotes this tweet
     * @param options The options for quoting
     * @returns The created tweet
     */
    async quote(options) {
        return this.client.tweets.create({ ...options, quoteTweet: this.id });
    }
    /**
     * Deletes this tweet.
     * @returns A boolean representing whether the tweet got deleted
     */
    async delete() {
        return this.client.tweets.delete(this.id);
    }
}
_Tweet_instances = new WeakSet(), _Tweet_patchAuthor = function _Tweet_patchAuthor(users) {
    if (!users)
        return;
    const rawAuthor = users.find(user => user.id === this.authorId);
    if (!rawAuthor)
        return;
    return new SimplifiedUser(this.client, rawAuthor);
}, _Tweet_patchMentions = function _Tweet_patchMentions(users) {
    const mentionedUsersCollection = new Collection();
    const mentions = this.entities?.mentions;
    if (!users || !mentions)
        return mentionedUsersCollection;
    for (const mention of mentions) {
        const rawMentionedUser = users.find(user => user.id === mention.id);
        if (!rawMentionedUser)
            continue;
        const mentionedUser = new SimplifiedUser(this.client, rawMentionedUser);
        mentionedUsersCollection.set(mentionedUser.id, mentionedUser);
    }
    return mentionedUsersCollection;
}, _Tweet_patchTweetReferences = function _Tweet_patchTweetReferences(referenceType, tweets) {
    const originalTweetId = this.referencedTweets?.find(tweet => tweet.type === referenceType)?.id;
    if (!originalTweetId || !tweets)
        return;
    const rawOriginalTweet = tweets.find(tweet => tweet.id === originalTweetId);
    if (!rawOriginalTweet)
        return;
    return new SimplifiedTweet(this.client, rawOriginalTweet);
}, _Tweet_patchPolls = function _Tweet_patchPolls(rawPolls) {
    const pollsCollection = new Collection();
    if (!rawPolls)
        return pollsCollection;
    for (const rawPoll of rawPolls) {
        const poll = new Poll(this.client, rawPoll);
        pollsCollection.set(poll.id, poll);
    }
    return pollsCollection;
}, _Tweet_patchPlaces = function _Tweet_patchPlaces(rawPlaces) {
    const placesCollection = new Collection();
    if (!rawPlaces)
        return placesCollection;
    for (const rawPlace of rawPlaces) {
        const place = new Place(this.client, rawPlace);
        placesCollection.set(place.id, place);
    }
    return placesCollection;
}, _Tweet_patchMedia = function _Tweet_patchMedia(rawMediaContents) {
    const mediaCollection = new Collection();
    if (!rawMediaContents)
        return mediaCollection;
    for (const rawMediaContent of rawMediaContents) {
        const mediaContent = new Media(this.client, rawMediaContent);
        mediaCollection.set(mediaContent.id, mediaContent);
    }
    return mediaCollection;
};
