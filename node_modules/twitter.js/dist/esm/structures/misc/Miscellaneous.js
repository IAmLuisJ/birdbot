var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ClientCredentials_instances, _ClientCredentials_validate;
import { CustomError } from '../../errors';
/**
 * The class for storing data required for generating an API request
 */
export class RequestData {
    constructor(data) {
        this.query = data.query;
        this.body = data.body;
        this.isStreaming = data.isStreaming;
        this.isUserContext = data.isUserContext;
    }
}
export class TweetAttachments {
    constructor(data) {
        this.mediaKeys = data.media_keys ?? [];
        this.pollIds = data.poll_ids ?? [];
    }
}
export class TweetReference {
    constructor(data) {
        this.type = data.type;
        this.id = data.id;
    }
}
export class TweetGeo {
    constructor(data) {
        this.placeId = data.place_id;
        this.type = data.coordinates?.type ?? null;
        this.coordinates = data.coordinates ? new TweetGeoCoordinates(data.coordinates) : null;
    }
}
export class TweetGeoCoordinates {
    constructor(data) {
        this.latitude = data.coordinates?.[0] ?? null;
        this.longitude = data.coordinates?.[1] ?? null;
    }
}
export class UserPublicMetrics {
    constructor(data) {
        this.followersCount = data.followers_count;
        this.followingCount = data.following_count;
        this.tweetCount = data.tweet_count;
        this.listedCount = data.listed_count;
    }
}
export class PollOption {
    constructor(data) {
        this.position = data.position;
        this.label = data.label;
        this.votes = data.votes;
    }
}
export class PlaceGeo {
    constructor(data) {
        this.type = data.type;
        this.bbox = data.bbox;
        this.properties = data.properties;
    }
}
/**
 * A class that represents the data returned when the authorized user follows a target user
 */
export class UserFollowResponse {
    constructor(data) {
        this.following = data.data.following;
        this.pendingFollow = data.data.pending_follow;
    }
}
/**
 * A class that represents the data returned when the authorized user unfollows a target user
 */
export class UserUnfollowResponse {
    constructor(data) {
        this.following = data.data.following;
    }
}
/**
 * A class that represents the data returned when the authorized user blocks a target user
 */
export class UserBlockResponse {
    constructor(data) {
        this.blocking = data.data.blocking;
    }
}
/**
 * A class that represents the data returned when the authorized user unblocks a target user
 */
export class UserUnblockResponse {
    constructor(data) {
        this.blocking = data.data.blocking;
    }
}
/**
 * A class that represents the data returned when the authorized user mutes a target user
 */
export class UserMuteResponse {
    constructor(data) {
        this.muting = data.data.muting;
    }
}
/**
 * A class that represents the data returned when the authorized user unmutes a target user
 */
export class UserUnmuteResponse {
    constructor(data) {
        this.muting = data.data.muting;
    }
}
/**
 * A class that represents the data returned when the authorized user likes a target tweet
 */
export class TweetLikeResponse {
    constructor(data) {
        this.liked = data.data.liked;
    }
}
/**
 * A class that represents the data returned when the authorized user unlikes a target tweet
 */
export class TweetUnlikeResponse {
    constructor(data) {
        this.liked = data.data.liked;
    }
}
/**
 * A class that represents the data returned when the authorized user hides or unhides a target tweet reply
 */
export class TweetReplyHideUnhideResponse {
    constructor(data) {
        this.hidden = data.data.hidden;
    }
}
/**
 * A class that represents the data returned when the authorized user retweets a target tweet
 */
export class RetweetResponse {
    constructor(data) {
        this.retweeted = data.data.retweeted;
    }
}
/**
 * A class that represents the data returned when the authorized user removes retweet of a target tweet
 */
export class RemovedRetweetResponse {
    constructor(data) {
        this.retweeted = data.data.retweeted;
    }
}
export class ClientCredentials {
    constructor(data) {
        _ClientCredentials_instances.add(this);
        __classPrivateFieldGet(this, _ClientCredentials_instances, "m", _ClientCredentials_validate).call(this, data);
        this.consumerKey = data.consumerKey;
        this.consumerSecret = data.consumerSecret;
        this.accessToken = data.accessToken;
        this.accessTokenSecret = data.accessTokenSecret;
        this.username = data.username;
        this.bearerToken = data.bearerToken;
    }
}
_ClientCredentials_instances = new WeakSet(), _ClientCredentials_validate = function _ClientCredentials_validate({ consumerKey, consumerSecret, accessToken, accessTokenSecret, username, bearerToken, }) {
    if (typeof consumerKey !== 'string' ||
        typeof consumerSecret !== 'string' ||
        typeof accessToken !== 'string' ||
        typeof accessTokenSecret !== 'string' ||
        typeof username !== 'string' ||
        typeof bearerToken !== 'string') {
        throw new CustomError('CREDENTIALS_NOT_STRING');
    }
};
export class TweetCountBucket {
    constructor(data, granularity) {
        this.start = new Date(data.start);
        this.end = new Date(data.end);
        this.count = data.tweet_count;
        this.granularity = granularity ?? 'hour';
    }
}
/**
 * Represents withholding details about a user
 */
export class UserWitheld {
    constructor(data) {
        this.countryCodes = data.country_codes;
        this.scope = data.scope ?? null;
    }
}
/**
 * Represents withholding details about a tweet
 */
export class TweetWithheld extends UserWitheld {
    constructor(data) {
        super(data);
        this.copyright = data.copyright;
    }
}
/**
 * The rule that matched against the filtered tweet
 */
export class MatchingRule {
    constructor(data) {
        this.id = data.id;
        this.tag = typeof data.tag === 'string' ? (data.tag.length > 0 ? data.tag : null) : null;
    }
}
