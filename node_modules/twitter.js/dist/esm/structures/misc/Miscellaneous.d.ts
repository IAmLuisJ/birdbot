import type { ClientCredentialsInterface, RequestDataOptions } from '../../typings';
import type { APIPlaceGeo, APIPlaceGeoBoundingBox, APIPollOption, APITweetAttachments, APITweetGeo, APITweetGeoCoordinates, APITweetReferencedTweet, APITweetReferencedTweetType, APITweetWithheld, APIUserPublicMetrics, APIUserWithheld, DeleteTweetsLikeResponse, DeleteUsersBlockingResponse, DeleteUsersFollowingResponse, DeleteUsersMutingResponse, DeleteUsersRetweetsResponse, Granularity, PostTweetsLikeResponse, PostUsersBlockingResponse, PostUsersFollowingResponse, PostUsersMutingResponse, PostUsersRetweetsResponse, PutTweetReplyHideUnhideResponse, SearchCount, Snowflake } from 'twitter-types';
/**
 * The class for storing data required for generating an API request
 */
export declare class RequestData<Q = undefined, B = undefined> {
    /**
     * The query for the request
     */
    query?: Q;
    /**
     * The body of the request
     */
    body?: B;
    /**
     * Whether the endpoint responds with a stream of data over persisent http connection
     */
    isStreaming?: boolean;
    /**
     * Whether the endpoint need user context authorization
     */
    isUserContext?: boolean;
    constructor(data: RequestDataOptions<Q, B>);
}
export declare class TweetAttachments {
    mediaKeys: Array<string>;
    pollIds: Array<string>;
    constructor(data: APITweetAttachments);
}
export declare class TweetReference {
    /**
     * The relation between this tweet and the referenced tweet
     */
    type: APITweetReferencedTweetType;
    /**
     * The ID of the referenced tweet
     */
    id: Snowflake;
    constructor(data: APITweetReferencedTweet);
}
export declare class TweetGeo {
    placeId: string;
    type: 'Point' | null;
    coordinates: TweetGeoCoordinates | null;
    constructor(data: APITweetGeo);
}
export declare class TweetGeoCoordinates {
    latitude: number | null;
    longitude: number | null;
    constructor(data: APITweetGeoCoordinates);
}
export declare class UserPublicMetrics {
    followersCount: number;
    followingCount: number;
    tweetCount: number;
    listedCount: number;
    constructor(data: APIUserPublicMetrics);
}
export declare class PollOption {
    position: number;
    label: string;
    votes: number;
    constructor(data: APIPollOption);
}
export declare class PlaceGeo {
    type: string;
    bbox: APIPlaceGeoBoundingBox;
    properties: Record<string, unknown>;
    constructor(data: APIPlaceGeo);
}
/**
 * A class that represents the data returned when the authorized user follows a target user
 */
export declare class UserFollowResponse {
    /**
     * Whether the authorized user is following the target user
     */
    following: boolean;
    /**
     * Whether the follow request of authorized user is yet to be approved by the target user
     */
    pendingFollow: boolean;
    constructor(data: PostUsersFollowingResponse);
}
/**
 * A class that represents the data returned when the authorized user unfollows a target user
 */
export declare class UserUnfollowResponse {
    /**
     * Whether the authorized user is following the target user
     */
    following: boolean;
    constructor(data: DeleteUsersFollowingResponse);
}
/**
 * A class that represents the data returned when the authorized user blocks a target user
 */
export declare class UserBlockResponse {
    /**
     * Whether the authorized user is blocking the target user
     */
    blocking: boolean;
    constructor(data: PostUsersBlockingResponse);
}
/**
 * A class that represents the data returned when the authorized user unblocks a target user
 */
export declare class UserUnblockResponse {
    /**
     * Whether the authorized user is blocking the target user
     */
    blocking: boolean;
    constructor(data: DeleteUsersBlockingResponse);
}
/**
 * A class that represents the data returned when the authorized user mutes a target user
 */
export declare class UserMuteResponse {
    /**
     * Whether the authorized user is muting the target user
     */
    muting: boolean;
    constructor(data: PostUsersMutingResponse);
}
/**
 * A class that represents the data returned when the authorized user unmutes a target user
 */
export declare class UserUnmuteResponse {
    /**
     * Whether the authorized user is muting the target user
     */
    muting: boolean;
    constructor(data: DeleteUsersMutingResponse);
}
/**
 * A class that represents the data returned when the authorized user likes a target tweet
 */
export declare class TweetLikeResponse {
    /**
     * Whether the authorized user is liking the target tweet
     */
    liked: boolean;
    constructor(data: PostTweetsLikeResponse);
}
/**
 * A class that represents the data returned when the authorized user unlikes a target tweet
 */
export declare class TweetUnlikeResponse {
    /**
     * Whether the authorized user is liking the target tweet
     */
    liked: boolean;
    constructor(data: DeleteTweetsLikeResponse);
}
/**
 * A class that represents the data returned when the authorized user hides or unhides a target tweet reply
 */
export declare class TweetReplyHideUnhideResponse {
    /**
     * Whether the target tweet reply is hidden
     */
    hidden: boolean;
    constructor(data: PutTweetReplyHideUnhideResponse);
}
/**
 * A class that represents the data returned when the authorized user retweets a target tweet
 */
export declare class RetweetResponse {
    retweeted: boolean;
    constructor(data: PostUsersRetweetsResponse);
}
/**
 * A class that represents the data returned when the authorized user removes retweet of a target tweet
 */
export declare class RemovedRetweetResponse {
    retweeted: boolean;
    constructor(data: DeleteUsersRetweetsResponse);
}
export declare class ClientCredentials {
    #private;
    consumerKey: string;
    consumerSecret: string;
    accessToken: string;
    accessTokenSecret: string;
    username: string;
    bearerToken: string;
    constructor(data: ClientCredentialsInterface);
}
export declare class TweetCountBucket {
    /**
     * The start time of the bucket
     */
    start: Date;
    /**
     * The end time of the bucket
     */
    end: Date;
    /**
     * The number of tweets created between start and end time that matched with the query
     */
    count: number;
    /**
     * The timespan between start and end time of this bucket
     */
    granularity: Granularity;
    constructor(data: SearchCount, granularity: Granularity | null);
}
/**
 * Represents withholding details about a user
 */
export declare class UserWitheld {
    /**
     * A list of countries where this content is not available
     */
    countryCodes: Array<string>;
    /**
     * The type of content being withheld
     */
    scope: string | null;
    constructor(data: APIUserWithheld);
}
/**
 * Represents withholding details about a tweet
 */
export declare class TweetWithheld extends UserWitheld {
    /**
     * Whether the content is being withheld on the basis of copyright infringement
     */
    copyright: boolean;
    constructor(data: APITweetWithheld);
}
/**
 * The rule that matched against the filtered tweet
 */
export declare class MatchingRule {
    /**
     * The id of the filter rule
     */
    id: Snowflake;
    /**
     * The tag of the filter rule
     */
    tag: string | null;
    constructor(data: {
        id: Snowflake;
        tag?: string;
    });
}
