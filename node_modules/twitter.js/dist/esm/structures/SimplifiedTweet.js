var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SimplifiedTweet_instances, _SimplifiedTweet_patchReferencedTweets, _SimplifiedTweet_patchTweetContextAnnotations;
import { BaseStructure } from './BaseStructure';
import { TweetNonPublicMetrics, TweetOrganicMetrics, TweetPromotedMetrics, TweetPublicMetrics, TweetContextAnnotation, TweetAttachments, TweetGeo, TweetReference, TweetEntities, TweetWithheld, } from './misc';
/**
 * A simplified version of {@link Tweet} class
 */
export class SimplifiedTweet extends BaseStructure {
    constructor(client, data) {
        super(client, data);
        _SimplifiedTweet_instances.add(this);
        this.text = data.text;
        this.attachments = data.attachments ? new TweetAttachments(data.attachments) : null;
        this.authorId = data.author_id ?? null;
        this.contextAnnotations = __classPrivateFieldGet(this, _SimplifiedTweet_instances, "m", _SimplifiedTweet_patchTweetContextAnnotations).call(this, data.context_annotations);
        this.conversationId = data.conversation_id ?? null;
        this.createdAt = data.created_at ? new Date(data.created_at) : null;
        this.entities = data.entities ? new TweetEntities(data.entities) : null;
        this.geo = data.geo ? new TweetGeo(data.geo) : null;
        this.inReplyToUserId = data.in_reply_to_user_id ?? null;
        this.lang = data.lang ?? null;
        this.nonPublicMetrics = data.non_public_metrics ? new TweetNonPublicMetrics(data.non_public_metrics) : null;
        this.organicMetrics = data.organic_metrics ? new TweetOrganicMetrics(data.organic_metrics) : null;
        this.possiblySensitive = data.possibly_sensitive ?? null;
        this.promotedMetrics = data.promoted_metrics ? new TweetPromotedMetrics(data.promoted_metrics) : null;
        this.publicMetrics = data.public_metrics ? new TweetPublicMetrics(data.public_metrics) : null;
        this.referencedTweets = __classPrivateFieldGet(this, _SimplifiedTweet_instances, "m", _SimplifiedTweet_patchReferencedTweets).call(this, data.referenced_tweets);
        this.replySettings = data.reply_settings ?? null;
        this.source = data.source ?? null;
        this.withheld = data.withheld ? new TweetWithheld(data.withheld) : null;
    }
    /**
     * Likes this tweet.
     * @returns A {@link TweetLikeResponse} object
     */
    async like() {
        return this.client.tweets.like(this.id);
    }
    /**
     * Unlikes this tweet.
     * @returns A {@link TweetUnlikeResponse} object
     */
    async unlike() {
        return this.client.tweets.unlike(this.id);
    }
    /**
     * Hides this tweet from the tweet replies section.
     *
     * **Note:** This tweet should be a reply to a tweet of the authorized user
     *
     * @returns A {@link TweetReplyHideUnhideResponse} object
     */
    async hide() {
        return this.client.tweets.hide(this.id);
    }
    /**
     * Unhides this tweet.
     *
     * **Note:** This tweet should be a reply to a tweet of the authorized user
     *
     * @returns A {@link TweetReplyHideUnhideResponse} object
     */
    async unhide() {
        return this.client.tweets.unhide(this.id);
    }
    /**
     * Retweets this tweet.
     * @returns A {@link RetweetResponse} object
     */
    async retweet() {
        return this.client.tweets.retweet(this.id);
    }
    /**
     * Removes the retweet of this tweet.
     * @returns A {@link RemovedRetweetResponse} object
     */
    async unRetweet() {
        return this.client.tweets.unRetweet(this.id);
    }
    /**
     * Fetches users who have retweeted this tweet.
     * @returns A {@link Collection} of {@link User} objects
     */
    async fetchRetweetedBy() {
        return this.client.tweets.fetchRetweetedBy(this.id);
    }
}
_SimplifiedTweet_instances = new WeakSet(), _SimplifiedTweet_patchReferencedTweets = function _SimplifiedTweet_patchReferencedTweets(rawTweetReferences) {
    const tweetReferencesArray = [];
    if (!rawTweetReferences)
        return tweetReferencesArray;
    for (const rawTweetReference of rawTweetReferences) {
        const tweetReference = new TweetReference(rawTweetReference);
        tweetReferencesArray.push(tweetReference);
    }
    return tweetReferencesArray;
}, _SimplifiedTweet_patchTweetContextAnnotations = function _SimplifiedTweet_patchTweetContextAnnotations(rawContextAnnotations) {
    const tweetContextAnnotationsArray = [];
    if (!rawContextAnnotations)
        return tweetContextAnnotationsArray;
    for (const rawContextAnnotation of rawContextAnnotations) {
        const contextAnnotation = new TweetContextAnnotation(rawContextAnnotation);
        tweetContextAnnotationsArray.push(contextAnnotation);
    }
    return tweetContextAnnotationsArray;
};
